this.sap = this.sap || {};


(function () {
  "use strict";
  sap.ushell = sap.ushell || {};

  function mergeConfig(oMutatedBaseConfig, oConfigToMerge, bCloneConfigToMerge) {
    var oActualConfigToMerge = bCloneConfigToMerge ? JSON.parse(JSON.stringify(oConfigToMerge)) : oConfigToMerge;

    if (typeof oConfigToMerge !== "object") {
      return;
    }

    Object.keys(oActualConfigToMerge).forEach(function (sKey) {
      if (Object.prototype.toString.apply(oMutatedBaseConfig[sKey]) === "[object Object]" &&
        Object.prototype.toString.apply(oActualConfigToMerge[sKey]) === "[object Object]") {

        mergeConfig(oMutatedBaseConfig[sKey], oActualConfigToMerge[sKey], false);
        return;
      }
      oMutatedBaseConfig[sKey] = oActualConfigToMerge[sKey];
    });
  }


  function adjustApplicationConfiguration(oConfig) {
    var aApplicationKeys,
      oLaunchPageAdapterConfig,
      oNavTargetResolutionConfig,
      oAutoGeneratedGroup;

    function fnGetApplicationKeys(oCfg) {
      var aApplicationKeys = [],
        sApplicationKey;

      if (!oCfg || !oCfg.applications || typeof oCfg.applications !== "object") {
        return aApplicationKeys;
      }

      // create an array containing all valid navigation targets
      for (sApplicationKey in oCfg.applications) {
        // skip the application key "" as it would disrupt the rendering of the fiori2 renderer
        if (oCfg.applications.hasOwnProperty(sApplicationKey) && sApplicationKey !== "") {
          aApplicationKeys.push(sApplicationKey);
        }
      }

      return aApplicationKeys;
    }

    function fnMakeTile(oApplication, iIdSuffix, sKey) {
      var sApplicationTitle = oApplication.title || oApplication.additionalInformation.replace("SAPUI5.Component=", "").split(".").pop();
      return {
        "id": "sap_ushell_generated_tile_id_" + iIdSuffix,
        "title": sApplicationTitle,
        "size": "1x1",
        "tileType": "sap.ushell.ui.tile.StaticTile",
        "properties": {
          "chipId": "sap_ushell_generated_chip_id",
          "title": sApplicationTitle,
          "info": oApplication.description,
          "targetURL": "#" + sKey
        }
      };
    }

    aApplicationKeys = fnGetApplicationKeys(oConfig);

    if (aApplicationKeys.length) {

      // make sure we have the place for the tiles
      oLaunchPageAdapterConfig = jQuery.sap.getObject("services.LaunchPage.adapter.config", 0, oConfig);

      // make sure group exists
      if (!oLaunchPageAdapterConfig.groups) {
        oLaunchPageAdapterConfig.groups = [];
      }

      oAutoGeneratedGroup = {
        "id": "sap_ushell_generated_group_id",
        "title": "Generated Group",
        "tiles": []
      };
      oLaunchPageAdapterConfig.groups.unshift(oAutoGeneratedGroup);

      // generate the tile
      aApplicationKeys.forEach(function (sApplicationKey, iSuffix) {
        oAutoGeneratedGroup.tiles.push(
          fnMakeTile(oConfig.applications[sApplicationKey], iSuffix, sApplicationKey)
        );
      });

      // generate NavTargetResolution data from .applications
      oNavTargetResolutionConfig = jQuery.sap.getObject("services.NavTargetResolution.adapter.config.applications", 0, oConfig);
      mergeConfig(oNavTargetResolutionConfig, oConfig.applications, true);

      delete oConfig.applications;
    }

    return oConfig;
  }



  function bootstrap(fnCallback) {
	jQuery.sap.require("sap.ushell.services.Container");
	var config = window["sap-ushell-config"];
	var apps = jQuery.getJSON({ url: "/bootstrap/apps.json",  dataType: "json", async: false});
	config.applications = apps.responseJSON;
	
       var oClientSideTargetResolutionConfig,
          oRendererConfig,
          oUi5ComponentLoaderConfig;

       window["sap-ushell-config"] = adjustApplicationConfiguration(window["sap-ushell-config"]);
        oRendererConfig = jQuery.sap.getObject("renderers.fiori2.componentData.config",
          0, window["sap-ushell-config"]);
        if (!oRendererConfig.rootIntent) {
          oRendererConfig.rootIntent = "Shell-home";
        }

        // by default we disable the core-ext-light loading for the sandbox
       /*  oUi5ComponentLoaderConfig = jQuery.sap.getObject("services.Ui5ComponentLoader.config",
          0, window["sap-ushell-config"]);
        if (!oUi5ComponentLoaderConfig.hasOwnProperty("amendedLoading")) {
          oUi5ComponentLoaderConfig.amendedLoading = false;
        }

        oClientSideTargetResolutionConfig = jQuery.sap.getObject("services.ClientSideTargetResolution.adapter.config",
          0, window["sap-ushell-config"]);
        oClientSideTargetResolutionConfig.applications = jQuery.sap.getObject("services.NavTargetResolution.adapter.config.applications",
          undefined, window["sap-ushell-config"]);*/

        sap.ushell.bootstrap("local").done(fnCallback);	
  
    /*loadLaunchTileConfig()
      .then(function () {
        var oClientSideTargetResolutionConfig,
          oRendererConfig,
          oUi5ComponentLoaderConfig;

        window["sap-ushell-config"] = adjustApplicationConfiguration(window["sap-ushell-config"]);
        oRendererConfig = jQuery.sap.getObject("renderers.fiori2.componentData.config",
          0, window["sap-ushell-config"]);
        if (!oRendererConfig.rootIntent) {
          oRendererConfig.rootIntent = "Shell-home";
        }

        // by default we disable the core-ext-light loading for the sandbox
        oUi5ComponentLoaderConfig = jQuery.sap.getObject("services.Ui5ComponentLoader.config",
          0, window["sap-ushell-config"]);
        if (!oUi5ComponentLoaderConfig.hasOwnProperty("amendedLoading")) {
          oUi5ComponentLoaderConfig.amendedLoading = false;
        }

        // TODO: replace?
        // copy the NavTargetResolution.adapter.config.applications part to the ClientSideTargetResolution.config.targetMappings
        // in order to be able to transform it to the inbounds format
        oClientSideTargetResolutionConfig = jQuery.sap.getObject("services.ClientSideTargetResolution.adapter.config",
          0, window["sap-ushell-config"]);
        oClientSideTargetResolutionConfig.applications = jQuery.sap.getObject("services.NavTargetResolution.adapter.config.applications",
          undefined, window["sap-ushell-config"]);

        sap.ushell.bootstrap("local").done(fnCallback);
      })
      .catch(function (ex) {
        jQuery.sap.log.error(ex);
        alert("Can't loading tiles");
      });*/
  }

  function ajaxGet(url) {
    return new Promise(function (resolve, reject) {
      $.ajax({
        url: url,
        type: 'get',
        dataType: 'json',
        contentType: 'application/json'
      }).then(function (d) {
        return resolve(d);
      }).fail(function (ex) {
        return reject(ex);
      })
    });

  }
  function hackAddSampleImageTile(config)
  {
      var data = {"id": "ID_TILE_HACK",
          "title": '',
          "size": "1x2",
          "tileType": "ui5ext.sap.ushell.ui.tile.ExtImageTile",
          "properties": {
              "chipId": 'catalogTile_hack',
              "title": '',
              "subtitle":'',
              "info":'',	
              "icon":'',
              "targetURL":''
          }};
      config.services.LaunchPage.adapter.config.groups[0].tiles.push(data);

      var data2 = {"id": "ID_TILE_HACK",
          "title": '',
          "size": "1x1",
          "tileType": "sap.m.GenericTile",
          "properties": {
              "chipId": 'catalogTile_hack',
              "title": '',
              "subtitle":'',
              "info":'',	
              "icon":'',
              "targetURL":'',
              "tileContent" : [{
                  "Type" : "sap.m.TileContent",
                  "unit" : 'EUR',
                  "footer":"Current Quarter",
                  "content" : 
                         [
                              {"Type":"sap.m.NumericContent","scale":"M","value":"1.96","valueColor":"Error", "indicator":"Up"}
                         ]
              }]
          }
      };
      config.services.LaunchPage.adapter.config.groups[0].tiles.push(data2);
  }

  function getTableFromId(id)
  {
      return id.substring(0, id.indexOf(','));
  }
  function translateAction(action)
  {
      switch(action.bind)
      {
          case "list":
              return "#thinclient-player&/Objects/"+action.target+"/List";
          case "detail":
              var table = getTableFromId(action.target);
              return "#thinclient-player&/Objects/"+table+"/Detail?/id="+action.target;
          case "url":
              return action.target;
      }      
  }

  function loadLaunchTileConfig() {
	
			
    return new Promise(function (resolve, reject) {
      ajaxGet("/test.json")
        .then(function (data) {
          return Promise.resolve({
            services: {
              LaunchPage: {
                adapter: {
                  config: {
                    groups: [] 
                  }
                }
              }
            }
          });
        })
        .then(function (config) 
        { 
            //hackAddSampleImageTile(config);
			return resolve(mergeConfig(window["sap-ushell-config"], config, true));
        });
    });
  }


  window["sap-ushell-config"] = {
    defaultRenderer: "fiori2",
    renderers: {
      fiori2: {
        componentData: {
          config: {
            search: "hidden"
          }
        }
      }
    },
    applications: []
  };

  window['sap-ui-config'] = {
    "xx-bootTask": bootstrap
  };

  }());